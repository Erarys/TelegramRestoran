from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, CallbackQuery
from aiogram.types.input_file import FSInputFile

from db.queries.check_get import get_menu
from db.queries.orm import create_report, create_report_period, fill_table, fill_food_menu, delete_menu, \
    create_food_report, restart_table, delete_orders
from filters.base_filters import IsAdmin
from keyboards.admin_keyboard import get_menu_button, FoodDeleteCallback

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.utils import get_column_letter


class MenuForm(StatesGroup):
    name: str = State()
    price: int = State()


router = Router()
router.message.filter(IsAdmin())
filter_for_lagman = [
    "–ì—É–π—Ä—É",
    "–°—É–π—Ä—É",
    "–î–æ–º–∞—à–Ω–∏–π –ª–∞–≥–º–∞–Ω",
    "–ì—É–π—Ä—É —Ü–æ–º—è–Ω",
    "–î–∏–Ω-–¥–∏–Ω",
    "–õ–∞–≥–º–∞–Ω —Å —Ä–µ–±—Ä–∞–º–∏",
    "–ú–æ–≥—Ä—É",
    "–•–∞—É—Ö—É–∞",
    "–ú–æ—à—Ä—É",
    "–§–∏—Ä–º–µ–Ω–Ω—ã–π –ª–∞–≥–º–∞–Ω \"–ê—Ä—ã—Å\"",
    "–ö—Ä–∞—Å–Ω—ã–µ –ø–µ–ª—å–º–µ–Ω–∏",
    "–ú–∞–º–ø–∞—Ä",
    "–°—É–ø —Å –º—è—Å–æ–º",
    "–ü–µ–ª—å–º–µ–Ω—å",
    "–§—Ä–∏ —Å –º—è—Å–æ–º",
    "–ú—è—Å–æ –ø–æ-—Ç–∞–π—Å–∫–∏",
    "–ú—É—à—É—Ä—É —Å–∞–π",
    "–ú–æ–≥—É—Ä—É —Å–∞–π",
    "–ö–∞–∑–∞–Ω-–∫–µ–±–∞–±",
    "–î–∞–ø–∞–Ω–¥–∂–∏",
    "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç",
    "–ü–µ–∫–∏–Ω—Å–∫–∏–π —Å–∞–ª–∞—Ç",
    "–•—Ä—É—Å—Ç—è—â–∏–π –±–∞–∫–ª–∞–∂–∞–Ω",
    "–ê—á—É—á—É–∫",
    "–§—Ä–∏",
]
filter_for_shashlik = [
    "–ë–∞—Ä–∞–Ω–∏–Ω–∞",
    "–£—Ç–∫–∞",
    "–ö—Ä—ã–ª–æ—á–∫–∞",
    "–õ—é–ª—è",
    "–†–µ–±—Ä–∞",
    "–ê–Ω—Ç—Ä–µ–∫–æ—Ç",
    "–ì–æ–≤—è–¥–∏–Ω–∞",
    "–û–≤–æ—â–Ω–æ–π",
    "–®–∞–º–ø–∏–Ω–∏–æ–Ω",
    "–û–∫–æ—Ä–∞—á–∫–∞",
]

def excel_work(orders_df, excel_path):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ DataFrame
    df = orders_df

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    df.to_excel(excel_path, index=False)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
    wb = load_workbook(excel_path)
    ws = wb.active

    # üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    header_fill = PatternFill(start_color="FFD966", end_color="FFD966", fill_type="solid")  # —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
    header_font = Font(bold=True)

    for col_num, cell in enumerate(ws[1], 1):
        cell.fill = header_fill
        cell.font = header_font

        # üìè –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        max_length = len(str(cell.value))
        col_letter = get_column_letter(col_num)

        for row in ws.iter_rows(min_row=2, min_col=col_num, max_col=col_num):
            for cell_in_row in row:
                if cell_in_row.value:
                    max_length = max(max_length, len(str(cell_in_row.value)))

        ws.column_dimensions[col_letter].width = max_length + 2  # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø

    # üé® –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
    last_row_fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π

    for cell in ws[ws.max_row]:  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
        cell.fill = last_row_fill

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    wb.save(excel_path)


@router.message(Command("delete"))
async def delete_order(message: Message, command: CommandObject):
    await message.answer(f"{message.chat.id}")
    if command.args is not None:
        figure = command.args.split()
        result = await delete_orders(list(map(int, figure)))
        await message.answer(f"–ú—ã —É–¥–∞–ª–∏–ª–∏: {result}")


@router.message(Command("report"))
async def create_order_report(message: Message, command: CommandObject):
    await message.answer(f"{message.chat.id}")
    if command.args is not None:
        try:
            start_day, end_day = command.args.split()
            file_path = f"reports/report_{start_day} {end_day}.xlsx"
            start_day_time = datetime.strptime(start_day, "%d.%m.%Y")
            end_day_time = datetime.strptime(end_day, "%d.%m.%Y")

            orders_dt = await create_report_period(start_day_time, end_day_time)
        except:
            await message.answer("–û—à–∏–±–∫–∞")
    else:
        today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)
        file_path = f"reports/report_{today:%Y%m%d}.xlsx"

        orders_dt: dict = await create_report(today, tomorrow)

    orders_dt["–ò—Ç–æ–≥–æ"] = {
        "–ß–µ–∫": sum([value["–ß–µ–∫"] for value in orders_dt.values()])
    }
    orders_df = pd.DataFrame.from_dict(orders_dt, orient='index')  # –∫–ª—é—á–∏ 10, 11 —Å—Ç–∞–Ω—É—Ç –∏–Ω–¥–µ–∫—Å–∞–º–∏
    excel_work(orders_df, file_path)

    document = FSInputFile(file_path)
    await message.bot.send_document(message.chat.id, document)


@router.message(Command("report_food"))
async def report_shashlik(message: Message, command: CommandObject):
    args = command.args
    if not isinstance(args, str):
        await message.answer("–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞")

    if args is not None:
        try:
            start_day, end_day = command.args.split()
            file_path = f"reports/report_{start_day} {end_day}.xlsx"
            start_day_time = datetime.strptime(start_day, "%d.%m.%Y")
            end_day_time = datetime.strptime(end_day, "%d.%m.%Y")

            orders_dt = await create_food_report(start_day_time, end_day_time, filter_for_shashlik)
        except:
            await message.answer("–û—à–∏–±–∫–∞")
            return
    else:
        today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)

        file_path = f"reports/report_food{today:%Y%m%d}.xlsx"

        orders_dt: dict = await create_food_report(today, tomorrow, filter_for_shashlik)

    orders_dt["–ò—Ç–æ–≥–æ"] = {
        "–°—É–º–º–∞": sum([value["–°—É–º–º–∞"] for value in orders_dt.values()]),
        "–î–æ–ª—è —à–∞—à–ª—ã—á–Ω–∏–∫–∞": sum([value["–î–æ–ª—è —à–∞—à–ª—ã—á–Ω–∏–∫–∞"] for value in orders_dt.values()]),
    }

    orders_df = pd.DataFrame.from_dict(orders_dt, orient='index')  # –∫–ª—é—á–∏ 10, 11 —Å—Ç–∞–Ω—É—Ç –∏–Ω–¥–µ–∫—Å–∞–º–∏
    excel_work(orders_df, file_path)

    document = FSInputFile(file_path)
    await message.bot.send_document(message.chat.id, document)


@router.message(Command("report_food2"))
async def report_lagman(message: Message, command: CommandObject):
    args = command.args
    if not isinstance(args, str):
        await message.answer("–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞")

    if args is not None:
        try:
            start_day, end_day = command.args.split()
            file_path = f"reports/report_{start_day} {end_day}.xlsx"
            start_day_time = datetime.strptime(start_day, "%d.%m.%Y")
            end_day_time = datetime.strptime(end_day, "%d.%m.%Y")

            orders_dt = await create_food_report(start_day_time, end_day_time, filter_for_lagman)
        except:
            await message.answer("–û—à–∏–±–∫–∞")
            return
    else:
        today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)
        file_path = f"reports/report_food{today:%Y%m%d}.xlsx"

        orders_dt: dict = await create_food_report(today, tomorrow, food_names=filter_for_lagman)

    orders_dt["–ò—Ç–æ–≥–æ"] = {
        "–°—É–º–º–∞": sum([value["–°—É–º–º–∞"] for value in orders_dt.values()]),
        "–î–æ–ª—è —à–∞—à–ª—ã—á–Ω–∏–∫–∞": sum([value["–î–æ–ª—è —à–∞—à–ª—ã—á–Ω–∏–∫–∞"] for value in orders_dt.values()]),
    }

    orders_df = pd.DataFrame.from_dict(orders_dt, orient='index')  # –∫–ª—é—á–∏ 10, 11 —Å—Ç–∞–Ω—É—Ç –∏–Ω–¥–µ–∫—Å–∞–º–∏
    excel_work(orders_df, file_path)

    document = FSInputFile(file_path)
    await message.bot.send_document(message.chat.id, document)

@router.message(Command("add_table"))
async def restart_order(message: Message, command: CommandObject):
    args = command.args
    if not isinstance(args, str):
        await message.answer("–í—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞")

    if args.isdigit():
        amount = int(args)
        await fill_table(amount)
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        await message.answer("–ê—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")


@router.callback_query(FoodDeleteCallback.filter())
async def delete_food(callback: CallbackQuery, callback_data: FoodDeleteCallback):
    food_id = callback_data.food_id
    await delete_menu(food_id)
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–æ", reply_markup=None)


@router.message(Command("restart"))
async def restart_table_handler(message: Message):
    await restart_table()
    await message.answer("–í—Å–µ —Å—Ç–æ–ª—ã –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã üöÆ")


@router.message(Command("update_menu"))
async def update_menu(message: Message, state: FSMContext):
    await state.clear()
    menu: dict = await get_menu(0, 10000)

    for id in menu.keys():
        await message.answer(
            text=f"{menu[id]['name']}\n"
                 f"{menu[id]['price']}\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=get_menu_button(id)
        )

    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(MenuForm.name)


@router.message(F.text, MenuForm.name)
async def food_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)

    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    await state.set_state(MenuForm.price)


@router.message(F.text, MenuForm.price)
async def food_price(message: Message, state: FSMContext):
    price = message.text
    await state.update_data(price=price)
    food = await state.get_data()

    if food.get("name") and food.get("price"):
        is_exist = await fill_food_menu(food.get("name"), food.get("price"))
        print(food.get("name"))
        if is_exist:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π üö®")
        else:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await message.answer("–û—à–∏–±–∫–∞")


@router.message(Command("auto_fill"))
async def auto_fill(message: Message):
    dt = {
        "–ì—É–π—Ä—É": 2200,
        "–°—É–π—Ä—É": 2200,
        "–î–æ–º–∞—à–Ω–∏–π –ª–∞–≥–º–∞–Ω": 2200,
        "–ì—É–π—Ä—É —Ü–æ–º—è–Ω": 2200,
        "–î–∏–Ω-–¥–∏–Ω": 2200,
        "–õ–∞–≥–º–∞–Ω —Å —Ä–µ–±—Ä–∞–º–∏": 2200,
        "–ú–æ–≥—Ä—É": 2200,
        "–•–∞—É—Ö—É–∞": 2200,
        "–ú–æ—à—Ä—É": 2500,
        "–§–∏—Ä–º–µ–Ω–Ω—ã–π –ª–∞–≥–º–∞–Ω \"–ê—Ä—ã—Å\"": 2500,
        "–ö—Ä–∞—Å–Ω—ã–µ –ø–µ–ª—å–º–µ–Ω–∏": 2000,
        "–ú–∞–º–ø–∞—Ä": 2000,
        "–°—É–ø —Å –º—è—Å–æ–º": 2000,
        "–ü–µ–ª—å–º–µ–Ω—å": 2000,
        "–§—Ä–∏ —Å –º—è—Å–æ–º": 2800,
        "–ü—é—Ä–µ": 1000,
        "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç": 1500,
        "–ü–µ–∫–∏–Ω—Å–∫–∏–π —Å–∞–ª–∞—Ç": 2500,
        "–•—Ä—É—Å—Ç—è—â–∏–π –±–∞–∫–ª–∞–∂–∞–Ω": 2500,
        "–ê—á—É—á—É–∫": 2000,
        "Coca-Cola 2–ª": 1000,
        "Coca-Cola 1.5–ª": 800,
        "Fanta 1–ª": 700,
        "Coca-Cola 1–ª": 700,
        "–ß–∞–π": 350,
        "–§—Ä–∏": 1000,
        "–°–ø–∏—Ä–∞–ª—å–Ω—ã–µ —á–∏–ø—Å—ã": 700,
        "–õ–µ–ø–µ—à–∫–∞": 250,
        "–î–µ—Ç—Å–∫–∏–π —Å–æ–∫": 250,

        "–ü—Ä–∞–≥–∞": 800,
        "–ì—É—Å—å –ö—Ä–µ–ø–∫–æ–µ": 900,
        "–ì—É—Å—å –≠–∫—Å–ø–æ—Ä—Ç–Ω–æ–µ": 800,
        "–ì—É—Å—å": 800,
        "Carlsberg": 800,
        "Holsten Pilsener":900,
        "Holsten Light": 900,
        "Garage Lemon": 900,
        "Garage Cherry": 900,
        "–î–æ–±—Ä—ã–π –ë–æ–±—Ä": 800,
        "–î–æ–±—Ä—ã–π –ö—Ä–µ–ø–∫–æ–µ": 800,
        "Yang": 800,
        "Flash": 600,
        "–í–æ–¥–∫–∞ 100–º–ª": 700,



        "–ë–∞—Ä–∞–Ω–∏–Ω–∞":2000,
        "–£—Ç–∫–∞": 1600,
        "–ö—Ä—ã–ª–æ—á–∫–∞": 1500,
        "–õ—é–ª—è": 1800,
        "–†–µ–±—Ä–∞": 1800,
        "–ê–Ω—Ç—Ä–µ–∫–æ—Ç": 2400,
        "–ì–æ–≤—è–¥–∏–Ω–∞": 2000,
        "–û–≤–æ—â–Ω–æ–π": 1000,
        "–®–∞–º–ø–∏–Ω–∏–æ–Ω":1300,
        "–ö—É—Ä—Ç": 200,
        "Turan –í–æ–¥–∞": 450,
        "–õ–µ–π—Å –ª—É–∫": 1000,
        "–õ–µ–π—Å —Å—ã—Ä": 700,
        "–§–∞–Ω": 700,
        "–ö–∏—Ä–∏–µ—à–∫–∏": 350,
        "–ë–∞–≥–µ—Ç": 350,
        "–ö–∏—Ä–∏–µ—à–∫–∏ –ª–∞–π—Ç": 150,
        "–ê—Ä–∞—Ö–∏—Å": 500,
        "–ê—Ä–∞—Ö–∏—Å –ª–∞–π—Ç": 400,
        "–û–∫–æ—Ä–∞—á–∫–∞": 1800,


    }

    dt2 = {
        "–ú—è—Å–æ –ø–æ-—Ç–∞–π—Å–∫–∏": 3000,
        "–ú—É—à—É—Ä—É —Å–∞–π": 3000,
        "–ú–æ–≥—É—Ä—É —Å–∞–π": 3000,
        "–ö–∞–∑–∞–Ω-–∫–µ–±–∞–±": 3000,
        "–î–∞–ø–∞–Ω–¥–∂–∏": 10000,
    }

    garnishes = ["—Ä–∏—Å", "—Ñ—Ä–∏", "–ø—é—Ä–µ"]

    # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –±–ª—é–¥–∞–º–∏ –∏ –≥–∞—Ä–Ω–∏—Ä–∞–º–∏
    menu_with_garnish = {}

    for dish, price in dt2.items():
        for garnish in garnishes:
            dish_with_garnish = f"{dish} ({garnish})"
            menu_with_garnish[dish_with_garnish] = price

    dt.update(menu_with_garnish)
    for food_name, price in dt.items():
        is_exist = await fill_food_menu(food_name, price)
        if is_exist:
            await message.answer(f"–û–±–Ω–æ–≤–∏–ª–∏ —Ü–µ–Ω—É: {food_name}: {price}")
        else:
            await message.answer(f"{food_name}: {price}")
